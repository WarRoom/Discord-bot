import discord
from discord.ext import commands
import asyncio
import random
from datetime import datetime
import pytz
import os
from flask import Flask
from threading import Thread

#–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=["!", ".", "/"], intents=intents, help_command=None)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç –∂–∏–≤!"

def run_web():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_web)
    t.start()

# –ö–æ–º–∞–Ω–¥–∞ hello
@bot.command(help="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –±–æ—Ç–∞")
async def hello(ctx):
    await ctx.send("–ü—Ä–∏–≤–µ—Ç!")

# –ö–æ–º–∞–Ω–¥–∞ time ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
@bot.command(help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö")
async def time(ctx):
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    await ctx.send(f"üïí –°–µ–π—á–∞—Å {now.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö")

# –ö–æ–º–∞–Ω–¥–∞ coin ‚Äî –º–æ–Ω–µ—Ç–∫–∞
@bot.command(help="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
async def coin(ctx):
    result = random.choice(["ü™ô –û—Ä—ë–ª", "ü™ô –†–µ—à–∫–∞"])
    await ctx.send(result)

# –ö–æ–º–∞–Ω–¥–∞ dice ‚Äî –∫—É–±–∏–∫
@bot.command(help="–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫")
async def dice(ctx):
    result = random.randint(1, 6)
    await ctx.send(f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}")

# –ö–æ–º–∞–Ω–¥–∞ choose ‚Äî –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
@bot.command(help="–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü—Ä–∏–º–µ—Ä: `.choose —á–∞–π, –∫–æ—Ñ–µ, –≤–æ–¥–∞`")
async def choose(ctx, *, options):
    items = [item.strip() for item in options.split(',')]
    if len(items) < 2:
        await ctx.send("‚ùó –í–≤–µ–¥–∏ —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    else:
        choice = random.choice(items)
        await ctx.send(f"üéØ –Ø –≤—ã–±–∏—Ä–∞—é: **{choice}**")

# –ö–æ–º–∞–Ω–¥–∞ myid ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.command(help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–π Discord ID")
async def myid(ctx):
    await ctx.send(f"üÜî –¢–≤–æ–π ID: `{ctx.author.id}`")

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    lower_msg = message.content.lower()
    if "–∫–∞–∫ –¥–µ–ª–∞" in lower_msg or "kak dela" in lower_msg:
        responses = [
            "–û—Ç–ª–∏—á–Ω–æ! üòÑ",
            "–õ—É—á—à–µ, —á–µ–º –≤—Å–µ–≥–¥–∞!",
            "–ë—ã–≤–∞–ª–æ –∏ –ª—É—á—à–µ...",
            "–ü–ª–æ—Ö–æ, –Ω–æ –Ω–µ —Å–¥–∞—é—Å—å!",
            "–û—Ç–ª–∏—á–Ω–æ, –∞ —É —Ç–µ–±—è –∫–∞–∫?",
            "–ù–æ—Ä–º–∞–ª—å–Ω–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª!"
        ]
        await message.channel.send(random.choice(responses))
    await bot.process_commands(message)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
@bot.command(name="help", help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
async def help_command(ctx):
    help_text = "**üìñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
"
    for command in bot.commands:
        if command.name not in ["say", "sayto"]:
            help_text += f"**.{command.name}** ‚Äî {command.help or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
"
    await ctx.send(help_text)

# –û—á–∏—Å—Ç–∫–∞
DAYS = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
    "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
    "—Å—Ä–µ–¥–∞": 2,
    "—á–µ—Ç–≤–µ—Ä–≥": 3,
    "–ø—è—Ç–Ω–∏—Ü–∞": 4,
    "—Å—É–±–±–æ—Ç–∞": 5,
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
}

clean_schedule = {}

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}')
    cleaner_loop.start()

@bot.command(help="–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É. –ü—Ä–∏–º–µ—Ä: .setclean #–∫–∞–Ω–∞–ª –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 03:00")
async def setclean(ctx, channel: discord.TextChannel, day: str, time_str: str):
    day = day.lower()
    if day not in DAYS:
        await ctx.send("‚ö†Ô∏è –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.")
        return
    try:
        hour, minute = map(int, time_str.split(":"))
        clean_schedule[channel.id] = {
            "day": DAYS[day],
            "hour": hour,
            "minute": minute
        }
        await ctx.send(f"‚úÖ –ö–∞–Ω–∞–ª **{channel.mention}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: **{day.capitalize()} {hour:02d}:{minute:02d}** –ú–°–ö.")
    except:
        await ctx.send("‚ùó –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HH:MM. –ü—Ä–∏–º–µ—Ä: `03:00`")

@bot.command(help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π.")
async def cleanchannels(ctx):
    if not clean_schedule:
        await ctx.send("üì≠ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç.")
        return
    text = "**üßº –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:**
"
    for cid, sched in clean_schedule.items():
        channel = bot.get_channel(cid)
        day_str = list(DAYS.keys())[list(DAYS.values()).index(sched['day'])].capitalize()
        time_str = f"{sched['hour']:02d}:{sched['minute']:02d}"
        text += f"- {channel.mention if channel else f'Unknown (ID: {cid})'} ‚Äî **{day_str} {time_str} –ú–°–ö**
"
    await ctx.send(text)

@bot.command(help="–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: .purge 100")
@commands.has_permissions(manage_messages=True)
async def purge(ctx, amount: int):
    deleted = await ctx.channel.purge(limit=amount)
    await ctx.send(f"**üßπ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π**", delete_after=3)

@bot.loop(minutes=1)
async def cleaner_loop():
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    for cid, sched in clean_schedule.items():
        if now.weekday() == sched["day"] and now.hour == sched["hour"] and now.minute == sched["minute"]:
            channel = bot.get_channel(cid)
            if channel:
                deleted = await channel.purge(limit=1000)
                await channel.send(f"**–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...**
‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—á–∏—â–µ–Ω–∏–µ —á–∞—Ç–∞: ({len(deleted)})**")
    await asyncio.sleep(60)

keep_alive()
bot.run(os.getenv("TOKEN"))